//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RobotC.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class RobotCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, VARNAME=5, WHITESPACE=6, COMMENT=7;
	public const int
		RULE_statement = 0, RULE_variableExpr = 1, RULE_assignmentStmt = 2;
	public static readonly string[] ruleNames = {
		"statement", "variableExpr", "assignmentStmt"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'*'", "'&'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "VARNAME", "WHITESPACE", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RobotC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RobotCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RobotCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RobotCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentStmtContext assignmentStmt() {
			return GetRuleContext<AssignmentStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRobotCListener typedListener = listener as IRobotCListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRobotCListener typedListener = listener as IRobotCListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 0, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6;
			assignmentStmt();
			}
			State = 7;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableExprContext : ParserRuleContext {
		public IToken modifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARNAME() { return GetToken(RobotCParser.VARNAME, 0); }
		public VariableExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRobotCListener typedListener = listener as IRobotCListener;
			if (typedListener != null) typedListener.EnterVariableExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRobotCListener typedListener = listener as IRobotCListener;
			if (typedListener != null) typedListener.ExitVariableExpr(this);
		}
	}

	[RuleVersion(0)]
	public VariableExprContext variableExpr() {
		VariableExprContext _localctx = new VariableExprContext(Context, State);
		EnterRule(_localctx, 2, RULE_variableExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1 || _la==T__2) {
				{
				State = 9;
				_localctx.modifier = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__1 || _la==T__2) ) {
					_localctx.modifier = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 12;
			Match(VARNAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentStmtContext : ParserRuleContext {
		public IToken deref;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARNAME() { return GetToken(RobotCParser.VARNAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableExprContext variableExpr() {
			return GetRuleContext<VariableExprContext>(0);
		}
		public AssignmentStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRobotCListener typedListener = listener as IRobotCListener;
			if (typedListener != null) typedListener.EnterAssignmentStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRobotCListener typedListener = listener as IRobotCListener;
			if (typedListener != null) typedListener.ExitAssignmentStmt(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentStmtContext assignmentStmt() {
		AssignmentStmtContext _localctx = new AssignmentStmtContext(Context, State);
		EnterRule(_localctx, 4, RULE_assignmentStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 14;
				_localctx.deref = Match(T__1);
				}
			}

			State = 17;
			Match(VARNAME);
			State = 18;
			Match(T__3);
			State = 19;
			variableExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,7,22,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,1,3,1,11,8,1,1,1,1,1,1,
		2,3,2,16,8,2,1,2,1,2,1,2,1,2,1,2,0,0,3,0,2,4,0,1,1,0,2,3,20,0,6,1,0,0,
		0,2,10,1,0,0,0,4,15,1,0,0,0,6,7,3,4,2,0,7,8,5,1,0,0,8,1,1,0,0,0,9,11,7,
		0,0,0,10,9,1,0,0,0,10,11,1,0,0,0,11,12,1,0,0,0,12,13,5,5,0,0,13,3,1,0,
		0,0,14,16,5,2,0,0,15,14,1,0,0,0,15,16,1,0,0,0,16,17,1,0,0,0,17,18,5,5,
		0,0,18,19,5,4,0,0,19,20,3,2,1,0,20,5,1,0,0,0,2,10,15
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
